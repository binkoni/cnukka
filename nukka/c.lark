start: translation_unit

translation_unit: external_declaration*

external_declaration: function_definition
                    | declaration

function_definition: declaration_specifier_list declarator declaration_list? compound_statement

declaration_specifier_list: declaration_specifier
                          | declaration_specifier_list declaration_specifier

declaration_specifier: storage_class_specifier
                     | type_specifier
                     | type_qualifier
                     | function_specifier

storage_class_specifier: "auto"
                       | "register"
                       | "static"
                       | "extern"
                       | "typedef"

type_specifier: "void"
              | "char"
              | "short"
              | "int"
              | "long"
              | "float"
              | "double"
              | "signed"
              | "unsigned"
              | "_Bool"
              | "_Complex"
              | struct_or_union_specifier
              | enum_specifier
              | typedef_name

struct_or_union_specifier: struct_or_union identifier? "{" struct_declaration+ "}"
                         | struct_or_union identifier

struct_or_union: "struct"
               | "union"

struct_declaration_list: struct_declaration
                       | struct_declaration_list struct_declaration

struct_declaration: specifier_qualifier_list struct_declarator_list ";"

specifier_qualifier_list: specifier_qualifier+
specifier_qualifier: type_specifier
                   | type_qualifier

type_qualifier: "const"
              | "restrict"
              | "volatile"

struct_declarator_list: struct_declarator
                     | struct_declarator_list "," struct_declarator

struct_declarator: declarator
                 | declarator ":" constant_expression
                 | ":" constant_expression

declarator: pointer? direct_declarator

pointer: "*" type_qualifier_list? pointer?
type_qualifier_list: type_qualifier
                   | type_qualifier_list type_qualifier

direct_declarator: identifier
                 | "(" declarator ")"
                 | direct_declarator "[" type_qualifier_list? assignment_expression"]"
                 | direct_declarator "[" "static" type_qualifier_list? assignment_expression "]"
                 | direct_declarator "[" type_qualifier_list "static" assignment_expression "]"
                 | direct_declarator "[" type_qualifier_list? "*" "]"
                 | direct_declarator "(" parameter_type_list ")"
                 | direct_declarator "(" identifier_list? ")"

assignment_expression: conditional_expression
                     | unary_expression assignment_operator assignment_expression

conditional_expression: logical_or_expression
                      | logical_or_expression "?" expression ":" conditional_expression

logical_or_expression: logical_and_expression
                     | logical_or_expression "||" logical_and_expression

logical_and_expression: inclusive_or_expression
                      | logical_and_expression "&&" inclusive_or_expression

inclusive_or_expression: exclusive_or_expression
                       | inclusive_or_expression "|" exclusive_or_expression

exclusive_or_expression: and_expression
                       | exclusive_or_expression "^" and_expression

and_expression: equality_expression
              | and_expression "&" equality_expression

equality_expression: relational_expression
                   | equality_expression "==" relational_expression
                   | equality_expression "!=" relational_expression

relational_expression: shift_expression
                     | relational_expression "<" shift_expression
                     | relational_expression ">" shift_expression
                     | relational_expression "<=" shift_expression
                     | relational_expression ">=" shift_expression

shift_expression: additive_expression
                | shift_expression "<<" additive_expression
                | shift_expression ">>" additive_expression

additive_expression: multiplicative_expression
                   | additive_expression "+" multiplicative_expression
                   | additive_expression "-" multiplicative_expression

multiplicative_expression: cast_expression
                         | multiplicative_expression "*" cast_expression
                         | multiplicative_expression "/" cast_expression
                         | multiplicative_expression "%" cast_expression

cast_expression: unary_expression
               | "(" type_name ")" cast_expression

unary_expression: postfix_expression
                | "++" unary_expression
                | "--" unary_expression
                | unary_operator cast_expression
                | "sizeof" unary_expression
                | "sizeof" "(" type_name ")"

postfix_expression: primary_expression
                  | postfix_expression "[" expression "]"
                  | postfix_expression "(" argument_expression_list ")"
                  | postfix_expression "." identifier
                  | postfix_expression "->" identifier
                  | postfix_expression "++"
                  | postfix_expression "--"

primary_expression: identifier
                  | constant
                  | string
                  | "(" expression ")"

expression: assignment_expression
          | expression "," assignment_expression

argument_expression_list: assignment_expression
                        | argument_expression_list "," assignment_expression

type_name: specifier_qualifier_list abstract_declarator?

abstract_declarator: pointer
                    | pointer? direct_abstract_declarator

direct_abstract_declarator: "(" abstract_declarator ")"
                          | direct_abstract_declarator? "[" type_qualifier_list? assignment_expression? "]"
                          | direct_abstract_declarator? "[" "static" type_qualifier_list? assignment_expression "]"
                          | direct_abstract_declarator? "[" type_qualifier_list "static" assignment_expression "]"
                          | direct_abstract_declarator? "[" "*" "]"
                          | direct_abstract_declarator? "(" parameter_type_list? ")"

parameter_type_list: parameter_list
                   | parameter_list "," "..."

parameter_list: parameter_declaration
              | parameter_list "," parameter_declaration

parameter_declaration: declaration_specifier_list declarator
                     | declaration_specifier_list abstract_declarator
                     | declaration_specifier_list

initializer_list: designation? initializer
                | initializer_list "," designation? initializer

designation: designator+ "="

designator: "[" constant_expression "]"
          | "." identifier

constant_expression: conditional_expression

initializer: assignment_expression
           | "{" initializer_list "}"
           | "{" initializer_list "," "}"

unary_operator: "&"
              | "*"
              | "+"
              | "-"
              | "~"
              | "!"

assignment_operator: "="
                   | "*="
                   | "/="
                   | "%="
                   | "+="
                   | "-="
                   | "<<="
                   | ">>="
                   | "&="
                   | "^="
                   | "|="

identifier_list: identifier
               | identifier_list "," identifier

enum_specifier: "enum" identifier "{" enumerator_list "}"
              | "enum" "{" enumerator_list "}"
              | "enum" identifier

enumerator_list: enumerator
               | enumerator_list "," enumerator

enumerator: identifier
          | identifier "=" constant_expression

typedef_name: identifier

function_specifier: "inline"

declaration_list: declaration
                | declaration_list declaration

declaration: declaration_specifier+ init_declarator_list? ";"

init_declarator_list: init_declarator
                    |  init_declarator_list "," init_declarator
init_declarator: declarator
               | declarator "=" initializer

compound_statement: "{" block_item_list? "}"
block_item_list: block_item
               | block_item_list block_item

block_item: declaration
          | statement

statement: labeled_statement
         | compound_statement
         | expression_statement
         | selection_statement
         | iteration_statement
         | jump_statement

labeled_statement: identifier ":" statement
                 | "case" constant_expression ":" statement
                 | "default" ":" statement

expression_statement: expression? ";"

selection_statement: "if" "(" expression ")" statement
                   | "if" "(" expression ")" statement "else" statement
                   | "switch" "(" expression ")" statement

iteration_statement: "while" "(" expression ")" statement
                   | "do" statement "while" "(" expression ")" ";"
                   | "for" "(" expression? ";" expression? ";" expression? ")" statement
                   | "for" "(" declaration expression? ";" expression? ")" statement

jump_statement: "goto" identifier ";"
              | "continue" ";"
              | "break" ";"
              | "return" expression? ";"


string: /".*?(?<!\\)"/
identifier: /[A-z_][A-z_0-9]*/
constant: integer_constant
        | character_constant
        | floating_constant
        | enumeration_constant
integer_constant: /-?\d+/
character_constant: 
floating_constant: /-?\d+(\.\d+)([eE][+-]?\d+)?/
enumeration_constant: /[A-z_][A-z_0-9]*/

%import common.WS
%ignore WS
